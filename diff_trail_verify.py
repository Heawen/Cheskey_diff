# 验证设计者给出的各轮次差分路径
# 由各轮输入输出差分推导出该轮中各模加运算的差分
# 查模加运算表，给出差分传递所需满足的约束条件


class Chaskey():

    def __init__(self, Round, word_len):
        self.Round = Round
        self.word_len = word_len

    modadd_table = {'str': ['z_z', 'z_y', 'z_x', 'y_z', 'y_y', 'y_x', 'x_z', 'x_y', 'x_x'],
                    '0000000': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0000110': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0000111': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0001010': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0001011': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0001100': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0001101': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0010000': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0010110': [0, ' ', ' ', 1, ' ', ' ', ' ', ' ', ' '],
                    '0010111': [1, ' ', ' ', 0, ' ', ' ', ' ', ' ', ' '],
                    '0011010': [' ', 1, ' ', ' ', 0, ' ', ' ', ' ', ' '],
                    '0011011': [' ', 0, ' ', ' ', 1, ' ', ' ', ' ', ' '],
                    '0011100': [' ', ' ', 1, ' ', ' ', 0, ' ', ' ', ' '],
                    '0011101': [' ', ' ', 0, ' ', ' ', 1, ' ', ' ', ' '],
                    '0010010': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 1],
                    '0010011': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 0],
                    '0010100': [' ', ' ', ' ', ' ', ' ', ' ', ' ', 1, ' '],
                    '0010101': [' ', ' ', ' ', ' ', ' ', ' ', ' ', 0, ' '],
                    '0011000': [' ', ' ', ' ', ' ', ' ', ' ', 0, ' ', ' '],
                    '0011001': [' ', ' ', ' ', ' ', ' ', ' ', 1, ' ', ' '],
                    '0011111': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0100000': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0100110': [0, ' ', ' ', ' ', ' ', ' ', 1, ' ', ' '],
                    '0100111': [1, ' ', ' ', ' ', ' ', ' ', 0, ' ', ' '],
                    '0101010': [' ', 1, ' ', ' ', ' ', ' ', ' ', 0, ' '],
                    '0101011': [' ', 0, ' ', ' ', ' ', ' ', ' ', 1, ' '],
                    '0101100': [' ', ' ', 1, ' ', ' ', ' ', ' ', ' ', 0],
                    '0101101': [' ', ' ', 0, ' ', ' ', ' ', ' ', ' ', 1],
                    '0100010': [' ', ' ', ' ', ' ', ' ', 1, ' ', ' ', ' '],
                    '0100011': [' ', ' ', ' ', ' ', ' ', 0, ' ', ' ', ' '],
                    '0100100': [' ', ' ', ' ', ' ', 1, ' ', ' ', ' ', ' '],
                    '0100101': [' ', ' ', ' ', ' ', 0, ' ', ' ', ' ', ' '],
                    '0101000': [' ', ' ', ' ', 0, ' ', ' ', ' ', ' ', ' '],
                    '0101001': [' ', ' ', ' ', 1, ' ', ' ', ' ', ' ', ' '],
                    '0101111': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0110000': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0110110': [0, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0110111': [1, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0111010': [' ', 1, ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0111011': [' ', 0, ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '0111100': [' ', ' ', 1, ' ', ' ', ' ', ' ', ' ', ' '],
                    '0111101': [' ', ' ', 0, ' ', ' ', ' ', ' ', ' ', ' '],
                    '0110010': [' ', ' ', ' ', ' ', ' ', 1, ' ', ' ', 1],
                    '0110011': [' ', ' ', ' ', ' ', ' ', 0, ' ', ' ', 0],
                    '0110100': [' ', ' ', ' ', ' ', 1, ' ', ' ', 1, ' '],
                    '0110101': [' ', ' ', ' ', ' ', 0, ' ', ' ', 0, ' '],
                    '0111000': [' ', ' ', ' ', 0, ' ', ' ', 0, ' ', ' '],
                    '0111001': [' ', ' ', ' ', 1, ' ', ' ', 1, ' ', ' '],
                    '0111111': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1000000': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1000110': [' ', ' ', ' ', 1, ' ', ' ', 1, ' ', ' '],
                    '1000111': [' ', ' ', ' ', 0, ' ', ' ', 0, ' ', ' '],
                    '1001010': [' ', ' ', ' ', ' ', 0, ' ', ' ', 0, ' '],
                    '1001011': [' ', ' ', ' ', ' ', 1, ' ', ' ', 1, ' '],
                    '1001100': [' ', ' ', ' ', ' ', ' ', 0, ' ', ' ', 0],
                    '1001101': [' ', ' ', ' ', ' ', ' ', 1, ' ', ' ', 1],
                    '1000010': [' ', ' ', 0, ' ', ' ', ' ', ' ', ' ', ' '],
                    '1000011': [' ', ' ', 1, ' ', ' ', ' ', ' ', ' ', ' '],
                    '1000100': [' ', 0, ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1000101': [' ', 1, ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1001000': [1, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1001001': [0, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1001111': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1010000': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1010110': [' ', ' ', ' ', 1, ' ', ' ', ' ', ' ', ' '],
                    '1010111': [' ', ' ', ' ', 0, ' ', ' ', ' ', ' ', ' '],
                    '1011010': [' ', ' ', ' ', ' ', 0, ' ', ' ', ' ', ' '],
                    '1011011': [' ', ' ', ' ', ' ', 1, ' ', ' ', ' ', ' '],
                    '1011100': [' ', ' ', ' ', ' ', ' ', 0, ' ', ' ', ' '],
                    '1011101': [' ', ' ', ' ', ' ', ' ', 1, ' ', ' ', ' '],
                    '1010010': [' ', ' ', 0, ' ', ' ', ' ', ' ', ' ', 1],
                    '1010011': [' ', ' ', 1, ' ', ' ', ' ', ' ', ' ', 0],
                    '1010100': [' ', 0, ' ', ' ', ' ', ' ', ' ', 1, ' '],
                    '1010101': [' ', 1, ' ', ' ', ' ', ' ', ' ', 0, ' '],
                    '1011000': [1, ' ', ' ', ' ', ' ', ' ', 0, ' ', ' '],
                    '1011001': [0, ' ', ' ', ' ', ' ', ' ', 1, ' ', ' '],
                    '1011111': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1100000': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1100110': [' ', ' ', ' ', ' ', ' ', ' ', 1, ' ', ' '],
                    '1100111': [' ', ' ', ' ', ' ', ' ', ' ', 0, ' ', ' '],
                    '1101010': [' ', ' ', ' ', ' ', ' ', ' ', ' ', 0, ' '],
                    '1101011': [' ', ' ', ' ', ' ', ' ', ' ', ' ', 1, ' '],
                    '1101100': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 0],
                    '1101101': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 1],
                    '1100010': [' ', ' ', 0, ' ', ' ', 1, ' ', ' ', ' '],
                    '1100011': [' ', ' ', 1, ' ', ' ', 0, ' ', ' ', ' '],
                    '1100100': [' ', 0, ' ', ' ', 1, ' ', ' ', ' ', ' '],
                    '1100101': [' ', 1, ' ', ' ', 0, ' ', ' ', ' ', ' '],
                    '1101000': [1, ' ', ' ', 0, ' ', ' ', ' ', ' ', ' '],
                    '1101001': [0, ' ', ' ', 1, ' ', ' ', ' ', ' ', ' '],
                    '1101111': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1110010': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1110011': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1110100': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1110101': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1111000': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1111001': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                    '1111111': [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']}

    def str2bin(self, a):
        b = bin(int(a, 16))[2:]
        if len(b) <= self.word_len:
            b = '0' * (self.word_len - len(b)) + b
        return b

    def rota_l(self, string, a):
        output = string[a:] + string[0:a]
        assert len(output) == self.word_len
        return output

    def rota_r(self, string, a):
        output = string[len(string) - a:] + string[0:len(string) - a]
        assert len(output) == self.word_len
        return output

    def xor(self, a, b):
        c = bin(int(a, 2) ^ int(b, 2))[2:]

        if len(c) <= self.word_len:
            c = '0' * (self.word_len - len(c)) + c
        assert len(c) == self.word_len
        return c

   def diff_verify(self, dx, dy, dz):
        # 输入模加运算的输入输出差分，查表得其差分传递所能导出的约束条件
        # 进位差分
        dc = self.xor(dx, self.xor(dy, dz))
        print('dc  ob {}'.format(dc))
        for i in range(self.word_len - 2, 0, -1):
            check = dz[i + 1] + dy[i + 1] + dx[i + 1] + dz[i] + dy[i] + dx[i] + dc[i - 1]
            relation = []
            if check in self.modadd_table:
                for j in range(9):
                    if self.modadd_table[check][j] != ' ':

                        print(' 第 {} 和 {} 位:{} {} {} --> {}[{}] = {}[{}] + {}'.format(self.word_len - i - 2,
                                                                                      self.word_len - 1 - i,
                                                                                      check[0:3], check[3:6], check[6],
                                                                                      self.modadd_table['str'][j][0],
                                                                                      self.word_len - i - 2,
                                                                                      self.modadd_table['str'][j][2],
                                                                                      self.word_len - 1 - i,
                                                                                      str(self.modadd_table[check][j])))


    def read_file(self, filename):
        f = open(filename, 'r')
        diff_trail = []
        for i in f:
            diff_trail.append(((i.strip()).split()))
        f.close()
        assert len(diff_trail) == 9
        return diff_trail

    def round_verify(self, r, input, output):
        # In = ['0x0C200008', '0x08200008', '0x81008104', '0x81000085']       # 第3轮
        # Out = ['0x00000000', '0x00000000', '0x80800000', '0x00800000']
        # In = ['0x90EA132B', '0x88490EDB', '0x45854D95', '0xE6A41996']       # 第1轮
        # Out = ['0x1AC8DA46', '0x73C0D20A', '0x9282B2A3', '0x02947AA1']
        # In = ['0x1AC8DA46', '0x73C0D20A', '0x9282B2A3', '0x02947AA1']       # 第2轮
        # Out = ['0x0C200008', '0x08200008', '0x81008104', '0x81000085']
        # In = ['0x18400010', '0x18C02200', '0x02401001', '0x08421212']       # 第7轮
        # Out = ['0x6A00109B', '0x50B7698C', '0x60001286', '0x68037999']
        # In = ['0x6A00109B', '0x50B7698C', '0x60001286', '0x68037999']       # 第8轮
        # Out = ['0x726DC8C0', '0x097D6D14', '0x23822459', '0x2C2329AF']

        In = [];
        Out = []
        for i in input:
            In.append(self.str2bin(i))
        for i in output:
            Out.append(self.str2bin(i))

        # mod_add： A1，A3:x_1,y_1,z_1,u_1,v_1; A2,A4: x_2,y_2,z_2,u_2,v_2
        x_1 = In[0]
        y_1 = In[1]
        x_2 = In[2]
        y_2 = In[3]
        v_2 = self.rota_r(Out[2], 16)
        u_2 = self.rota_r(self.xor(v_2, Out[1]), 7)
        v_1 = Out[0]
        u_1 = self.rota_r(self.xor(Out[0], Out[3]), 13)
        z_1 = self.xor(u_2, self.rota_l(In[1], 5))
        z_2 = self.xor(u_1, self.rota_l(In[3], 8))
        zz_1 = self.rota_l(z_1, 16)
        zz_2 = z_2

        print('Round {}'.format(r))
        for i in range(1, 3):
            exec("print('x_{} ob', x_{})".format(i, i))
            exec("print('y_{} ob', y_{})".format(i, i))
            exec("print('z_{} ob', z_{})".format(i, i))
            exec('self.diff_verify(x_{},y_{},z_{})'.format(i, i, i))
            exec("print('zz_{} ob', zz_{})".format(i, i))
            exec("print('u_{}  ob', u_{})".format(i, i))
            exec("print('v_{}  ob', v_{})".format(i, i))
            exec('self.diff_verify(zz_{},u_{},v_{})'.format(i, i, i))
            print('\n')


if __name__ == '__main__':
    chaskey = Chaskey_diff_verify(1, 32)
    diff_trail = chaskey.read_file('8_round_diff.txt')
    for i in range(8):
        chaskey.round_verify(i, diff_trail[i], diff_trail[i + 1])
